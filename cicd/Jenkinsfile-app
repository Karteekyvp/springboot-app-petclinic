pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        ECR_REPO = '499075732001.dkr.ecr.us-east-1.amazonaws.com/cicddemo/petclinic-repo'
        IMAGE_TAG = 'latest'
        EC2_HOST = 'ec2-user@54.226.138.65'
        SSH_KEY_ID = 'EC2_SSH_KEY' // Jenkins credential ID for your EC2 SSH private key
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/Karteekyvp/springboot-app-petclinic.git'
            }
        }

        stage('SCA Security Scan') {
            steps {
                script {
                    sh '''
                    echo "‚ñ∂Ô∏è Running Security Scan with Trivy..."

                    export TRIVY_PATH="$WORKSPACE/trivy"
                    if ! [ -x "$TRIVY_PATH" ]; then
                        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b $WORKSPACE
                    fi

                    $TRIVY_PATH fs --exit-code 0 --severity HIGH,CRITICAL .
                    '''
                }
            }
        }

        stage('Build Spring Boot Application') {
            steps {
                script {
                    sh '''
                    echo "‚ñ∂Ô∏è Building Spring Boot Application..."
                    java -version || { echo "‚ùå Java not installed!"; exit 1; }
                    mvn -version || { echo "‚ùå Maven not installed!"; exit 1; }

                    mvn clean package -DskipTests -Dcheckstyle.skip=true
                    echo "‚úÖ Spring Boot application built successfully!"
                    '''
                }
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_Credentials']]) {
                        sh '''
                        echo "‚ñ∂Ô∏è Logging into AWS ECR..."
                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO

                        echo "‚ñ∂Ô∏è Building Docker Image..."
                        docker build -t $ECR_REPO:$IMAGE_TAG .
                        docker push $ECR_REPO:$IMAGE_TAG

                        echo "‚úÖ Docker image pushed to ECR."
                        '''
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                script {
                    sshagent(credentials: [SSH_KEY_ID]) {
                        sh '''
                        echo "‚ñ∂Ô∏è Deploying on EC2 Instance..."

                        ssh -o StrictHostKeyChecking=no $EC2_HOST << EOF
                            echo "üõë Stopping old container..."
                            docker stop springboot-app || true
                            docker rm springboot-app || true

                            echo "üßº Cleaning old image..."
                            docker rmi $ECR_REPO:$IMAGE_TAG || true

                            echo "üîê Logging in to ECR..."
                            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO

                            echo "‚¨áÔ∏è Pulling latest image..."
                            docker pull $ECR_REPO:$IMAGE_TAG

                            echo "üöÄ Starting new container..."
                            docker run -d --name springboot-app -p 8080:8080 $ECR_REPO:$IMAGE_TAG
                        EOF
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ EC2 Deployment successful!"
        }
        failure {
            echo "‚ùå Deployment failed. Check logs!"
        }
    }
}
