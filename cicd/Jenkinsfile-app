pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        ECR_REPO = '528757819999.dkr.ecr.us-east-1.amazonaws.com/springboot-app'
        K8S_NAMESPACE = 'default'
        IMAGE_TAG = 'latest'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/meghana-boda0611/spring-petclinic.git'
            }
        }

        stage('SCA Security Scan') {
            steps {
                script {
                    sh '''
                    echo "‚ñ∂Ô∏è Running Security Scan with Trivy..."

                    # Install Trivy if not installed
                    if ! command -v trivy &> /dev/null; then
                        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
                    fi

                    # Run security scan
                    trivy fs --exit-code 1 --severity HIGH,CRITICAL .
                    '''
                }
            }
        }

        stage('Build Spring Boot Application') {
            steps {
                script {
                    sh '''
                    echo "‚ñ∂Ô∏è Building Spring Boot Application..."

                    if [ -f "pom.xml" ]; then
                        echo "üìå Detected Maven project"
                        mvn clean package -DskipTests
                    elif [ -f "build.gradle" ]; then
                        echo "üìå Detected Gradle project"
                        ./gradlew build -x test
                    else
                        echo "‚ùå ERROR: No valid build file found!"
                        exit 1
                    fi
                    '''
                }
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_Credentials']]) {
                        sh '''
                        echo "‚ñ∂Ô∏è Logging into AWS ECR..."
                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO

                        echo "‚ñ∂Ô∏è Building Docker Image..."
                        docker build -t $ECR_REPO:$IMAGE_TAG .

                        echo "‚ñ∂Ô∏è Pushing Docker Image to AWS ECR..."
                        docker push $ECR_REPO:$IMAGE_TAG

                        echo "‚úÖ Docker image pushed successfully!"
                        '''
                    }
                }
            }
        }

        stage('Update Kubernetes Deployment') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_Credentials']]) {
                        sh '''
                        echo "‚ñ∂Ô∏è Applying Kubernetes Deployment and Service..."
                        kubectl apply -f deployment.yaml
                        kubectl apply -f service.yaml

                        echo "‚ñ∂Ô∏è Updating Deployment Image..."
                        kubectl set image deployment/springboot-app springboot-app=$ECR_REPO:$IMAGE_TAG -n $K8S_NAMESPACE

                        echo "‚ñ∂Ô∏è Verifying Deployment Rollout..."
                        kubectl rollout status deployment/springboot-app -n $K8S_NAMESPACE

                        echo "‚úÖ Kubernetes deployment updated successfully!"
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Deployment successful!"
        }
        failure {
            echo "‚ùå Deployment failed. Check logs!"
        }
    }
}

