pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        S3_BUCKET = 'your-terraform-karrammeg061122110203'       // Replace with your bucket name
        DYNAMODB_TABLE = 'terraform-lock-table'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/Karteekyvp/springboot-app-petclinic.git'
            }
        }

        stage('Create S3 and DynamoDB for Terraform Backend') {
            steps {
                sh '''
                echo "Checking if S3 bucket exists..."
                if ! aws s3 ls "s3://$S3_BUCKET" 2>&1 | grep -q 'NoSuchBucket'; then
                  echo "S3 bucket already exists."
                else
                  echo "Creating S3 bucket: $S3_BUCKET"
                  if [ "$AWS_REGION" = "us-east-1" ]; then
                    aws s3api create-bucket --bucket $S3_BUCKET --region $AWS_REGION
                  else
                    aws s3api create-bucket --bucket $S3_BUCKET --region $AWS_REGION --create-bucket-configuration LocationConstraint=$AWS_REGION
                  fi
                  aws s3api put-bucket-versioning --bucket $S3_BUCKET --versioning-configuration Status=Enabled
                fi

                echo "Checking if DynamoDB table exists..."
                if aws dynamodb describe-table --table-name $DYNAMODB_TABLE >/dev/null 2>&1; then
                  echo "DynamoDB table already exists."
                else
                  echo "Creating DynamoDB table: $DYNAMODB_TABLE"
                  aws dynamodb create-table \
                    --table-name $DYNAMODB_TABLE \
                    --attribute-definitions AttributeName=LockID,AttributeType=S \
                    --key-schema AttributeName=LockID,KeyType=HASH \
                    --billing-mode PAY_PER_REQUEST
                fi
                '''
            }
        }

        stage('Terraform Import Existing Resources') {
            steps {
                sh '''
                cd ECSFargate/infra

                echo "Importing S3 bucket into Terraform state..."
                terraform state list | grep module.s3_backend.aws_s3_bucket.terraform_state >/dev/null 2>&1 || \
                  terraform import module.s3_backend.aws_s3_bucket.terraform_state $S3_BUCKET

                echo "Importing DynamoDB table into Terraform state..."
                terraform state list | grep module.s3_backend.aws_dynamodb_table.terraform_lock >/dev/null 2>&1 || \
                  terraform import module.s3_backend.aws_dynamodb_table.terraform_lock $DYNAMODB_TABLE
                '''
            }
        }

        stage('Terraform Init') {
            steps {
                sh '''
                cd ECSFargate/infra
                terraform init
                '''
            }
        }

        stage('Terraform Plan') {
            steps {
                sh '''
                cd ECSFargate/infra
                terraform plan -out=tfplan
                '''
            }
        }

        stage('Terraform Apply') {
            steps {
                input message: "Approve Terraform Apply?"
                sh '''
                cd ECSFargate/infra
                terraform apply -auto-approve tfplan
                '''
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}

